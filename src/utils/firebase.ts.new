// Import the Firebase SDK
import { FirebaseError, initializeApp } from "firebase/app";
import {
  getFirestore,
  doc,
  setDoc,
  getDoc,
  updateDoc,
  type Firestore,
  type DocumentData,
  collection,
  query,
  where,
  getDocs,
  Timestamp,
  serverTimestamp,
  addDoc,
  limit,
} from "firebase/firestore";
import {
  getAuth,
  type Auth,
  type User,
  onAuthStateChanged as firebaseOnAuthStateChanged,
  signOut as firebaseSignOut,
  signInWithEmailAndPassword as firebaseSignIn,
  createUserWithEmailAndPassword as firebaseCreateUser,
  sendEmailVerification as firebaseSendEmailVerification,
  applyActionCode as firebaseApplyActionCode,
  ActionCodeSettings,
} from "firebase/auth";
import {
  getStorage,
  ref,
  uploadBytes,
  getDownloadURL,
  type FirebaseStorage,
} from "firebase/storage";
import { debug } from "./debugging";

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  // Replace with your Firebase config from the Firebase console
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,
};

// Initialize Firebase
let app;
let auth: Auth;
let db: Firestore;
let storage: FirebaseStorage;

try {
  app = initializeApp(firebaseConfig);
  auth = getAuth(app);
  db = getFirestore(app);
  storage = getStorage(app);
  debug("Firebase", "Firebase initialized successfully");
} catch (error) {
  if (error instanceof FirebaseError) {
    console.error("Firebase initialization error:", error.code, error.message);
  } else {
    console.error("Error initializing Firebase:", error);
  }

  console.warn("Firebase authentication will not work. Using fallback mode.");

  // Create a dummy implementation that won't crash the app
  // but will log warnings if anyone tries to use it
  const createDummyAuth = (): Auth => {
    const dummyAuth = {} as Auth;
    // Add warning log for any property access
    return new Proxy(dummyAuth, {
      get: (_target, prop) => {
        console.warn(
          `Firebase Auth not initialized. Attempted to access ${String(prop)}`
        );
        return () => Promise.resolve(null);
      },
    });
  };

  const createDummyFirestore = (): Firestore => {
    const dummyFirestore = {} as Firestore;
    // Add warning log for any property access
    return new Proxy(dummyFirestore, {
      get: (_target, prop) => {
        console.warn(
          `Firestore not initialized. Attempted to access ${String(prop)}`
        );
        return () => Promise.resolve(null);
      },
    });
  };

  app = {} as any;
  auth = createDummyAuth();
  db = createDummyFirestore();
  storage = {} as any;
}

// Export for use in other parts of the app
export { auth, db, storage };

// Auth facade to simplify imports
export const createUserWithEmailAndPassword = firebaseCreateUser;
export const signInWithEmailAndPassword = firebaseSignIn;
export const signOut = firebaseSignOut;
export const onAuthStateChanged = firebaseOnAuthStateChanged;

// Send email verification with custom redirect URL
export const sendEmailVerification = async (
  redirectUrl?: string
): Promise<boolean> => {
  if (!auth.currentUser) return false;

  try {
    const actionCodeSettings: ActionCodeSettings = {
      // URL you want to redirect back to after email verification
      url: redirectUrl || `${window.location.origin}/auth/verify-email`,
      handleCodeInApp: true,
    };

    await firebaseSendEmailVerification(auth.currentUser, actionCodeSettings);
    return true;
  } catch (error) {
    console.error("Error sending verification email:", error);
    return false;
  }
};

// Apply action code (for email verification)
export const applyActionCode = (auth: Auth, code: string) =>
  firebaseApplyActionCode(auth, code);

// Create a user profile in Firestore
export const createUserProfile = async (
  user: User,
  data: Record<string, any>
): Promise<void> => {
  if (!user) {
    debug("Firebase", "Cannot create profile: No user provided");
    return;
  }

  try {
    const userRef = doc(db, "users", user.uid);
    await setDoc(userRef, {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      ...data,
    });
    debug("Firebase", "User profile created successfully");
  } catch (error) {
    console.error("Error creating user profile:", error);
    throw error;
  }
};

// Update user profile
export const updateUserProfile = async (
  userId: string,
  data: Record<string, any>
): Promise<void> => {
  if (!userId) {
    debug("Firebase", "Cannot update profile: No user ID provided");
    return;
  }

  try {
    const userRef = doc(db, "users", userId);
    await updateDoc(userRef, data);
    debug("Firebase", "User profile updated successfully");
  } catch (error) {
    console.error("Error updating user profile:", error);
    throw error;
  }
};

// Get user profile
export const getUserProfile = async (
  userId: string
): Promise<DocumentData | null> => {
  if (!userId) {
    debug("Firebase", "Cannot get profile: No user ID provided");
    return null;
  }

  try {
    const userRef = doc(db, "users", userId);
    const userSnap = await getDoc(userRef);

    if (userSnap.exists()) {
      return userSnap.data();
    } else {
      console.log("No user profile found");
      return null;
    }
  } catch (error) {
    console.error("Error getting user profile:", error);
    return null;
  }
}; 